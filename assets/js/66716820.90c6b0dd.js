"use strict";(self.webpackChunkeliza_docs=self.webpackChunkeliza_docs||[]).push([[42979],{52716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"functions/composeContext","title":"composeContext","description":"@ai16z/eliza v0.1.5-alpha.5 / composeContext","source":"@site/api/functions/composeContext.md","sourceDirName":"functions","slug":"/functions/composeContext","permalink":"/eliza/api/functions/composeContext","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"composeActionExamples","permalink":"/eliza/api/functions/composeActionExamples"},"next":{"title":"configureSettings","permalink":"/eliza/api/functions/configureSettings"}}');var a=t(74848),i=t(28453);const o={},c="Function: composeContext()",r={},l=[{value:"Parameters",id:"parameters",level:2},{value:"Returns",id:"returns",level:2},{value:"Example",id:"example",level:2},{value:"Defined in",id:"defined-in",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"/eliza/api/",children:"@ai16z/eliza v0.1.5-alpha.5"})," / composeContext"]}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"function-composecontext",children:"Function: composeContext()"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"composeContext"}),"(",(0,a.jsx)(n.code,{children:"params"}),"): ",(0,a.jsx)(n.code,{children:"any"})]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Composes a context string by replacing placeholders in a template with corresponding values from the state."}),"\n",(0,a.jsxs)(n.p,{children:["This function takes a template string with placeholders in the format ",(0,a.jsx)(n.code,{children:"{{placeholder}}"})," and a state object.\nIt replaces each placeholder with the value from the state object that matches the placeholder's name.\nIf a matching key is not found in the state object for a given placeholder, the placeholder is replaced with an empty string."]}),"\n",(0,a.jsxs)(n.p,{children:["By default, this function uses a simple string replacement approach. However, when ",(0,a.jsx)(n.code,{children:"templatingEngine"})," is set to ",(0,a.jsx)(n.code,{children:"'handlebars'"}),", it uses Handlebars templating engine instead, compiling the template into a reusable function and evaluating it with the provided state object."]}),"\n",(0,a.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,a.jsxs)(n.p,{children:["\u2022 ",(0,a.jsx)(n.strong,{children:"params"})]}),"\n",(0,a.jsx)(n.p,{children:"The parameters for composing the context."}),"\n",(0,a.jsxs)(n.p,{children:["\u2022 ",(0,a.jsx)(n.strong,{children:"params.state"}),": ",(0,a.jsx)(n.a,{href:"/eliza/api/interfaces/State",children:(0,a.jsx)(n.code,{children:"State"})})]}),"\n",(0,a.jsx)(n.p,{children:"The state object containing values to replace the placeholders in the template."}),"\n",(0,a.jsxs)(n.p,{children:["\u2022 ",(0,a.jsx)(n.strong,{children:"params.template"}),": ",(0,a.jsx)(n.code,{children:"string"})]}),"\n",(0,a.jsx)(n.p,{children:"The template string containing placeholders to be replaced with state values."}),"\n",(0,a.jsxs)(n.p,{children:["\u2022 ",(0,a.jsx)(n.strong,{children:"params.templatingEngine?"}),": ",(0,a.jsx)(n.code,{children:'"handlebars"'})]}),"\n",(0,a.jsxs)(n.p,{children:["The templating engine to use for compiling and evaluating the template (optional, default: ",(0,a.jsx)(n.code,{children:"undefined"}),")."]}),"\n",(0,a.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"any"})}),"\n",(0,a.jsx)(n.p,{children:"The composed context string with placeholders replaced by corresponding state values."}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// Given a state object and a template\nconst state = { userName: "Alice", userAge: 30 };\nconst template = "Hello, {{userName}}! You are {{userAge}} years old";\n\n// Composing the context with simple string replacement will result in:\n// "Hello, Alice! You are 30 years old."\nconst contextSimple = composeContext({ state, template });\n'})}),"\n",(0,a.jsx)(n.h2,{id:"defined-in",children:"Defined in"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/ai16z/eliza/blob/main/packages/core/src/context.ts#L28",children:"packages/core/src/context.ts:28"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(96540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);